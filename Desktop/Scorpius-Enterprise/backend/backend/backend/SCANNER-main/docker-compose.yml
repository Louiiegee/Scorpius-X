version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: scorpius
      POSTGRES_USER: scorpius
      POSTGRES_PASSWORD: scorpius
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scorpius"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  otel-collector:
    image: otel/opentelemetry-collector:0.101.0
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel-config.yaml:/etc/otelcol/config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    depends_on:
      - jaeger

  jaeger:
    image: jaegertracing/all-in-one:1.58
    ports:
      - "16686:16686"  # Web UI
      - "14250:14250"  # gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:10.4.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning

  scanner-api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE__URL=postgresql://scorpius:scorpius@postgres:5432/scorpius
      - REDIS__URL=redis://redis:6379/0
      - TELEMETRY__OTEL_ENDPOINT=http://otel-collector:4317
      - AUTH__JWT_SECRET=${AUTH__JWT_SECRET:-super-secret-key-change-in-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
    volumes:
      - ./workspace:/app/workspace
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  scanner-worker:
    build: .
    command: scorpius worker
    environment:
      - DATABASE__URL=postgresql://scorpius:scorpius@postgres:5432/scorpius
      - REDIS__URL=redis://redis:6379/0
      - TELEMETRY__OTEL_ENDPOINT=http://otel-collector:4317
      - AUTH__JWT_SECRET=${AUTH__JWT_SECRET:-super-secret-key-change-in-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./workspace:/app/workspace
    deploy:
      replicas: 2

volumes:
  postgres_data:
  redis_data:
  grafana_data:
