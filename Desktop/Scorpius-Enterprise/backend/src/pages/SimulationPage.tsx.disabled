
import React, { useState, useEffect, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Loader2, Play, AlertTriangle, ServerCrash, FlaskConical, ListChecks, Trash2, Eye, StopCircle, PlusCircle, BrainCircuit, FileText } from "lucide-react";
import { toast } from "sonner";
import { format } from "date-fns";
import {
  fetchSimulationEnvironments,
  createSimulationEnvironment,
  fetchSimulationRuns,
  startSimulationRun,
  fetchSimulationRunDetails,
  stopSimulationRun,
  deleteSimulationRun,
  startAIExploitAnalysis,
  fetchAIExploitAnalysisResults
} from '@/services/simulationService';
import { connectWebSocket, disconnectWebSocket } from '@/services/websocketService';
import { generateReport } from "@/services/reportsService";
import type { Report } from "@/types/api";
import type { SimulationRun, SimulationEnvironment, AIAnalysisConfig, AIAnalysisRun, AIExploitFinding, WebSocketMessageBase, SimulationUpdateMessage, AIAnalysisProgressMessage, AIExploitPoC } from '@/types/apiSpec';
import { cn } from '@/lib/utils';

const aiExploitCategories = [
    { id: "reentrancy", label: "Re-entrancy" },
    { id: "integer_overflow", label: "Integer Overflow/Underflow" },
    { id: "access_control", label: "Access Control" },
    { id: "timestamp_dependency", label: "Timestamp Dependency" },
    { id: "gas_limit", label: "Gas Limit Issues" },
    { id: "front_running", label: "Front-running" },
];


export default function SimulationPage() {
  // Environment States
  const [environments, setEnvironments] = useState<SimulationEnvironment[]>([]);
  const [isLoadingEnvs, setIsLoadingEnvs] = useState(false);
  const [envError, setEnvError] = useState<string | null>(null);
  const [newEnvName, setNewEnvName] = useState("");
  const [newEnvType, setNewEnvType] = useState("Mainnet Fork");
  const [isCreatingEnv, setIsCreatingEnv] = useState(false);

  // Simulation Run States (includes standard and AI)
  const [simulationRuns, setSimulationRuns] = useState<SimulationRun[]>([]); // This will hold both SimulationRun and AIAnalysisRun
  const [isLoadingRuns, setIsLoadingRuns] = useState(false);
  const [runError, setRunError] = useState<string | null>(null);
  
  // New Standard Simulation Form States
  const [simName, setSimName] = useState("");
  const [selectedEnvId, setSelectedEnvId] = useState<string>("");
  const [targetContract, setTargetContract] = useState("");
  const [functionSignature, setFunctionSignature] = useState("");
  const [txParams, setTxParams] = useState("");
  const [isStartingSim, setIsStartingSim] = useState(false);

  // New AI Analysis Form States
  const [aiTargetContract, setAiTargetContract] = useState("");
  const [aiProfile, setAiProfile] = useState("Quick Vulnerability Scan");
  const [isStartingAIAnalysis, setIsStartingAIAnalysis] = useState(false);
  const [advancedAIConfig, setAdvancedAIConfig] = useState<AIAnalysisConfig['advancedConfig']>({
    aiModel: "Scorpius-VulnSeeker v1",
    maxAnalysisDuration: 60, // minutes
    exploitCategories: [],
    resourceAllocation: 50, // percentage
  });
  const [showAdvancedAIConfigDialog, setShowAdvancedAIConfigDialog] = useState(false);


  // View Results Dialog
  const [selectedRunDetails, setSelectedRunDetails] = useState<SimulationRun | AIAnalysisRun | null>(null);
  const [isLoadingRunDetails, setIsLoadingRunDetails] = useState(false);
  const [aiExploitFindings, setAiExploitFindings] = useState<AIExploitFinding[]>([]);
  const [isLoadingAIFindings, setIsLoadingAIFindings] = useState(false);
  const [selectedPoc, setSelectedPoc] = useState<AIExploitPoC | null>(null);
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);


  const loadInitialData = useCallback(async () => {
    setIsLoadingEnvs(true);
    setIsLoadingRuns(true);
    setEnvError(null);
    setRunError(null);
    try {
      const [envs, runs] = await Promise.all([
        fetchSimulationEnvironments(),
        fetchSimulationRuns()
      ]);
      setEnvironments(envs);
      setSimulationRuns(runs);
    } catch (err: any) {
      const msg = err.message || "Failed to load initial simulation data.";
      setEnvError(msg); 
      setRunError(msg);
      toast.error("Data Load Error", { description: msg });
    } finally {
      setIsLoadingEnvs(false);
      setIsLoadingRuns(false);
    }
  }, []);

  useEffect(() => {
    loadInitialData();
  }, [loadInitialData]);
  
  const handleWebSocketMessage = useCallback((event: MessageEvent) => {
    try {
        const message = JSON.parse(event.data as string) as WebSocketMessageBase;
        
        if (message.type === "simulation_update" || message.type === "ai_analysis_progress") {
             const updateData = message as SimulationUpdateMessage | AIAnalysisProgressMessage;
            setSimulationRuns(prevRuns =>
                prevRuns.map(run =>
                    run.id === updateData.id
                        ? { ...run, 
                            status: updateData.status || run.status, 
                            progress: updateData.progress !== undefined ? updateData.progress : run.progress,
                            statusMessage: updateData.statusMessage || run.statusMessage
                          }
                        : run
                )
            );
             if (updateData.status === 'completed' || updateData.status === 'failed' || updateData.status === 'stopped') {
                disconnectWebSocket(`ws/simulation/live/${updateData.id}`);
                if (message.type === "ai_analysis_progress") {
                    disconnectWebSocket(`ws/simulation/ai-exploit/progress/${updateData.id}`);
                }
            }
        }
    } catch (error) {
        console.error("Error processing WebSocket message:", error);
    }
  }, []);


  const setupWebSocketForRun = useCallback((runId: string, type: "Standard Simulation" | "AI Exploit Analysis") => {
    const wsUrl = type === "AI Exploit Analysis" ? `ws/simulation/ai-exploit/progress/${runId}` : `ws/simulation/live/${runId}`;
    connectWebSocket(wsUrl, handleWebSocketMessage, 
        () => console.log(`WebSocket connected for run ${runId}`),
        (err) => console.error(`WebSocket error for run ${runId}:`, err),
        () => console.log(`WebSocket disconnected for run ${runId}`)
    );
  }, [handleWebSocketMessage]);


  useEffect(() => {
    simulationRuns.forEach(run => {
        if ((run.status === 'running' || run.status === 'queued')) {
            setupWebSocketForRun(run.id, run.type || "Standard Simulation");
        }
    });
    // Cleanup WebSockets on component unmount or when runs are removed/completed
    return () => {
        simulationRuns.forEach(run => {
            disconnectWebSocket(`ws/simulation/live/${run.id}`);
            if (run.type === "AI Exploit Analysis") {
                 disconnectWebSocket(`ws/simulation/ai-exploit/progress/${run.id}`);
            }
        });
    };
  }, [simulationRuns, setupWebSocketForRun]);


  const handleCreateEnvironment = async () => {
    if (!newEnvName || !newEnvType) {
      toast.error("Environment name and type are required.");
      return;
    }
    setIsCreatingEnv(true);
    setEnvError(null);
    try {
      const newEnv = await createSimulationEnvironment(newEnvName, newEnvType);
      setEnvironments(prev => [...prev, newEnv]);
      toast.success(`Environment "${newEnv.name}" created.`);
      setNewEnvName(""); 
    } catch (err: any) {
      setEnvError(err.message || "Failed to create environment.");
      toast.error("Environment Error", { description: err.message || "Failed to create environment." });
    } finally {
      setIsCreatingEnv(false);
    }
  };

  const handleStartSimulation = async () => {
    if (!simName || !selectedEnvId || !targetContract || !functionSignature) {
        toast.error("All fields (Name, Environment, Contract, Function) are required to start a simulation.");
        return;
    }
    setIsStartingSim(true);
    setRunError(null);
    try {
      const newRun = await startSimulationRun(simName, selectedEnvId, targetContract, functionSignature, txParams);
      setSimulationRuns(prev => [newRun, ...prev]); 
      setupWebSocketForRun(newRun.id, "Standard Simulation");
      toast.success(`Simulation "${newRun.name}" started.`);
      setSimName(""); setSelectedEnvId(""); setTargetContract(""); setFunctionSignature(""); setTxParams("");
    } catch (err: any) {
      setRunError(err.message || "Failed to start simulation.");
      toast.error("Simulation Start Error", { description: err.message || "Failed to start simulation." });
    } finally {
      setIsStartingSim(false);
    }
  };

  const handleStartAIAnalysis = async () => {
    if (!aiTargetContract || !aiProfile) {
      toast.error("Target Contract Address and AI Profile are required for AI Analysis.");
      return;
    }
    setIsStartingAIAnalysis(true);
    setRunError(null);
    const config: AIAnalysisConfig = {
      targetContractAddress: aiTargetContract,
      aiAnalysisProfile: aiProfile,
      advancedConfig: advancedAIConfig,
    };
    try {
      const newAIRun = await startAIExploitAnalysis(config);
      setSimulationRuns(prev => [newAIRun, ...prev]);
      setupWebSocketForRun(newAIRun.id, "AI Exploit Analysis");
      toast.success(`AI Exploit Analysis for "${newAIRun.config.targetContractAddress}" started.`);
      setAiTargetContract(""); 
      // Optionally reset advanced config here or keep it for next run
    } catch (err: any) {
      setRunError(err.message || "Failed to start AI analysis.");
      toast.error("AI Analysis Start Error", { description: err.message || "Failed to start AI analysis." });
    } finally {
      setIsStartingAIAnalysis(false);
    }
  };
  
  const handleViewResults = async (run: SimulationRun | AIAnalysisRun) => {
    setSelectedRunDetails(run); // Show basic run info immediately
    if (run.type === "AI Exploit Analysis" && run.status === "completed") {
      setIsLoadingAIFindings(true);
      setAiExploitFindings([]);
      try {
        const findings = await fetchAIExploitAnalysisResults(run.id);
        setAiExploitFindings(findings);
        if (findings.length === 0) {
            toast.info("AI Analysis Complete: No specific exploit findings reported by the backend for this run.");
        }
      } catch (err: any) {
        toast.error("Fetch AI Findings Error", { description: err.message || "Failed to load AI exploit findings." });
      } finally {
        setIsLoadingAIFindings(false);
      }
    } else if (run.type === "Standard Simulation" && run.status === "completed") {
        // For standard simulations, we might fetch detailed transaction traces or state changes
        setIsLoadingRunDetails(true);
        try {
            const details = await fetchSimulationRunDetails(run.id); // This might already be in 'run' if fully loaded
            setSelectedRunDetails(details); // Update with more details if any
        } catch (err: any) {
            toast.error("Fetch Details Error", { description: err.message || "Failed to fetch simulation details." });
        } finally {
            setIsLoadingRunDetails(false);
        }
    }
  };

  const handleStopRun = async (runId: string) => {
    toast.info(`Stopping run ${runId}...`);
    try {
        await stopSimulationRun(runId);
        // Status update will come via WebSocket
        // For immediate feedback if WebSocket is slow:
        // setSimulationRuns(prevRuns => prevRuns.map(r => r.id === runId ? {...r, status: 'stopped', statusMessage: 'Stopping...'} : r));
        toast.success(`Stop command sent for run ${runId}.`);
    } catch (err:any) {
        toast.error("Stop Failed", { description: err.message });
    }
  };
  
  const handleDeleteRun = async (runId: string) => {
    if (!confirm("Are you sure you want to delete this simulation run? This action cannot be undone.")) return;
    toast.info(`Deleting run ${runId}...`);
    try {
        await deleteSimulationRun(runId);
        setSimulationRuns(prevRuns => prevRuns.filter(r => r.id !== runId));
        disconnectWebSocket(`ws/simulation/live/${runId}`); // Ensure WebSocket is cleaned up
        disconnectWebSocket(`ws/simulation/ai-exploit/progress/${runId}`);
        toast.success(`Run ${runId} deleted.`);
    } catch (err:any) {
        toast.error("Delete Failed", { description: err.message });
    }
  };

  const handleAdvancedAIConfigCheckbox = (categoryId: string, checked: boolean) => {
    setAdvancedAIConfig(prev => ({
        ...prev,
        exploitCategories: checked
            ? [...(prev?.exploitCategories || []), categoryId]
            : (prev?.exploitCategories || []).filter(id => id !== categoryId)
    }));
  };

  const handleGenerateReport = async (run: SimulationRun | AIAnalysisRun) => {
    try {
      setIsGeneratingReport(true);
      toast.info("Generating Report", { description: "Creating PDF simulation report..." });
      
      const contractAddress = run.type === "AI Exploit Analysis" 
        ? (run as AIAnalysisRun).config.targetContractAddress 
        : (run as SimulationRun).id;
      
      const report = await generateReport(
        `Simulation Report - ${run.name}`,
        contractAddress,
        new Date(run.startTime),
        new Date()
      );
      
      toast.success("Report Generated", { description: "PDF report is ready for download." });
    } catch (error: any) {
      toast.error("Report Generation Failed", { description: error.message });
    } finally {
      setIsGeneratingReport(false);
    }
  };

  return (
    <div className="space-y-8">
      {/* Environments Card - No changes needed from previous step where it was introduced */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><FlaskConical /> Simulation Environments</CardTitle>
          <CardDescription>Manage your simulation environments.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Input placeholder="New Environment Name" value={newEnvName} onChange={e => setNewEnvName(e.target.value)} disabled={isCreatingEnv} />
             <Select value={newEnvType} onValueChange={setNewEnvType} disabled={isCreatingEnv}>
                <SelectTrigger className="w-[180px]"> <SelectValue placeholder="Select Type" /> </SelectTrigger>
                <SelectContent>
                    <SelectItem value="Mainnet Fork">Mainnet Fork</SelectItem>
                    <SelectItem value="Custom Testnet">Custom Testnet</SelectItem>
                </SelectContent>
            </Select>
            <Button onClick={handleCreateEnvironment} disabled={isCreatingEnv || !newEnvName}>
              {isCreatingEnv ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <PlusCircle className="mr-2 h-4 w-4" />} Create
            </Button>
          </div>
          {envError && <p className="text-sm text-destructive">{envError}</p>}
          {isLoadingEnvs ? <Loader2 className="mx-auto my-4 h-6 w-6 animate-spin" /> : (
            environments.length > 0 ? (
              <ul className="list-disc list-inside text-sm space-y-1 max-h-32 overflow-y-auto">
                {environments.map(env => <li key={env.id}>{env.name} ({env.type})</li>)}
              </ul>
            ) : <p className="text-sm text-muted-foreground">No environments created.</p>
          )}
        </CardContent>
      </Card>

      {/* Standard Simulation Card */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Play /> Standard Transaction Simulation</CardTitle>
          <CardDescription>Set up and execute a transaction simulation.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
            <Input placeholder="Simulation Name" value={simName} onChange={e => setSimName(e.target.value)} disabled={isStartingSim} />
            <Select onValueChange={setSelectedEnvId} value={selectedEnvId} disabled={environments.length === 0 || isStartingSim}>
                <SelectTrigger><SelectValue placeholder="Select Environment" /></SelectTrigger>
                <SelectContent>
                    {environments.map(env => <SelectItem key={env.id} value={env.id}>{env.name}</SelectItem>)}
                     {environments.length === 0 && <SelectItem value="" disabled>No environments available</SelectItem>}
                </SelectContent>
            </Select>
            <Input placeholder="Target Contract Address (0x...)" value={targetContract} onChange={e => setTargetContract(e.target.value)} disabled={isStartingSim} />
            <Input placeholder="Function Signature (e.g., transfer(address,uint256))" value={functionSignature} onChange={e => setFunctionSignature(e.target.value)} disabled={isStartingSim}/>
            <Input placeholder="Transaction Parameters (JSON or comma-separated)" value={txParams} onChange={e => setTxParams(e.target.value)} disabled={isStartingSim} />
            <Button onClick={handleStartSimulation} disabled={isStartingSim || environments.length === 0 || !selectedEnvId || !simName || !targetContract || !functionSignature} className="w-full">
                {isStartingSim ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Play className="mr-2 h-4 w-4" />} Start Standard Simulation
            </Button>
        </CardContent>
      </Card>
      
      {/* AI-Powered Exploit Discovery Card */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><BrainCircuit /> AI-Powered Exploit Discovery</CardTitle>
          <CardDescription>Leverage AI to find vulnerabilities in smart contracts.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Input placeholder="Target Contract Address (0x...)" value={aiTargetContract} onChange={e => setAiTargetContract(e.target.value)} disabled={isStartingAIAnalysis} />
          <Select value={aiProfile} onValueChange={setAiProfile} disabled={isStartingAIAnalysis}>
            <SelectTrigger><SelectValue placeholder="Select AI Analysis Profile" /></SelectTrigger>
            <SelectContent>
              <SelectItem value="Quick Vulnerability Scan">Quick Vulnerability Scan</SelectItem>
              <SelectItem value="Deep Exploit Search">Deep Exploit Search</SelectItem>
              <SelectItem value="Targeted Exploit (Re-entrancy)">Targeted Exploit (Re-entrancy)</SelectItem>
               <SelectItem value="Targeted Exploit (Flash Loan)">Targeted Exploit (Flash Loan)</SelectItem>
            </SelectContent>
          </Select>
          <Dialog open={showAdvancedAIConfigDialog} onOpenChange={setShowAdvancedAIConfigDialog}>
            <DialogTrigger asChild>
              <Button variant="outline" className="w-full">Advanced AI Configuration</Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[525px]">
              <DialogHeader><DialogTitle>Advanced AI Configuration</DialogTitle></DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="aiModel" className="text-right">AI Model</Label>
                  <Select 
                    defaultValue={advancedAIConfig?.aiModel} 
                    onValueChange={(value) => setAdvancedAIConfig(prev => ({...prev, aiModel: value}))}
                  >
                    <SelectTrigger className="col-span-3"><SelectValue /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Scorpius-VulnSeeker v1">Scorpius-VulnSeeker v1</SelectItem>
                      <SelectItem value="GPT-4 ExploitGen (Simulated)">GPT-4 ExploitGen (Simulated)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="maxDuration" className="text-right">Max Duration (min)</Label>
                  <Input id="maxDuration" type="number" defaultValue={advancedAIConfig?.maxAnalysisDuration} className="col-span-3" onChange={e => setAdvancedAIConfig(prev => ({...prev, maxAnalysisDuration: parseInt(e.target.value,10) || 60}))}/>
                </div>
                <div>
                    <Label className="text-sm font-medium">Exploit Categories to Focus On</Label>
                    <div className="grid grid-cols-2 gap-2 mt-2">
                        {aiExploitCategories.map(category => (
                            <div key={category.id} className="flex items-center space-x-2">
                                <Checkbox 
                                    id={`cat-${category.id}`} 
                                    checked={advancedAIConfig?.exploitCategories?.includes(category.id)}
                                    onCheckedChange={(checked) => handleAdvancedAIConfigCheckbox(category.id, !!checked)}
                                />
                                <Label htmlFor={`cat-${category.id}`} className="text-sm font-normal">{category.label}</Label>
                            </div>
                        ))}
                    </div>
                </div>
                 <div className="space-y-2">
                    <Label htmlFor="resourceAllocation">Resource Allocation: {advancedAIConfig?.resourceAllocation || 50}%</Label>
                    <Slider 
                        id="resourceAllocation"
                        defaultValue={[advancedAIConfig?.resourceAllocation || 50]} 
                        max={100} 
                        step={10} 
                        onValueChange={(value) => setAdvancedAIConfig(prev => ({...prev, resourceAllocation: value[0]}))}
                    />
                 </div>
              </div>
              <DialogFooter>
                <DialogClose asChild><Button type="button">Save Configuration</Button></DialogClose>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          <Button onClick={handleStartAIAnalysis} disabled={isStartingAIAnalysis || !aiTargetContract} className="w-full">
            {isStartingAIAnalysis ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <BrainCircuit className="mr-2 h-4 w-4" />} Start AI Analysis
          </Button>
        </CardContent>
      </Card>


      {/* Active & Recent Simulations Table Card */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><ListChecks /> Active & Recent Runs</CardTitle>
          <CardDescription>View status and results of standard simulations and AI analyses.</CardDescription>
        </CardHeader>
        <CardContent>
          {isLoadingRuns ? <Loader2 className="mx-auto my-8 h-8 w-8 animate-spin" /> : (
            runError ? <p className="text-destructive text-center py-4">{runError}</p> : (
            simulationRuns.length > 0 ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Progress</TableHead>
                    <TableHead>Start Time</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {simulationRuns.map(run => (
                    <TableRow key={run.id}>
                      <TableCell className="font-medium">{run.name}</TableCell>
                      <TableCell>{run.type || 'Standard Simulation'}</TableCell>
                      <TableCell>
                        <span className={cn(`px-2 py-1 text-xs rounded-full`, {
                            'bg-green-100 text-green-700 dark:bg-green-700 dark:text-green-100': run.status === 'completed',
                            'bg-blue-100 text-blue-700 dark:bg-blue-700 dark:text-blue-100': run.status === 'running' || run.status === 'queued',
                            'bg-red-100 text-red-700 dark:bg-red-700 dark:text-red-100': run.status === 'failed',
                            'bg-yellow-100 text-yellow-700 dark:bg-yellow-700 dark:text-yellow-100': run.status === 'stopped',
                            'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-100': !['completed', 'running', 'queued', 'failed', 'stopped'].includes(run.status)
                        })}>
                            {run.statusMessage || run.status} {(run.status === 'running' || run.status === 'queued') && <Loader2 className="inline ml-1 h-3 w-3 animate-spin" />}
                        </span>
                      </TableCell>
                       <TableCell>
                        {run.status === 'completed' ? '100%' : run.progress ? `${run.progress}%` : 'N/A'}
                      </TableCell>
                      <TableCell>{format(new Date(run.startTime), "PPpp")}</TableCell>
                      <TableCell className="space-x-1">
                        <Dialog>
                            <DialogTrigger asChild>
                                <Button variant="outline" size="sm" onClick={() => handleViewResults(run)} disabled={run.status !== 'completed'}><Eye className="h-4 w-4"/></Button>
                            </DialogTrigger>
                            <DialogContent className="sm:max-w-2xl max-h-[80vh] overflow-y-auto">
                                <DialogHeader><DialogTitle>Results: {selectedRunDetails?.name || run.name}</DialogTitle></DialogHeader>
                                {isLoadingRunDetails || isLoadingAIFindings ? <Loader2 className="mx-auto my-8 h-8 w-8 animate-spin" /> : 
                                 selectedRunDetails ? (
                                    run.type === "AI Exploit Analysis" ? (
                                        <div className="space-y-4">
                                            <p><strong>Contract:</strong> {(selectedRunDetails as AIAnalysisRun).config.targetContractAddress}</p>
                                            <p><strong>Profile:</strong> {(selectedRunDetails as AIAnalysisRun).config.aiAnalysisProfile}</p>
                                            <p><strong>Findings:</strong> {aiExploitFindings.length}</p>
                                            {aiExploitFindings.length > 0 ? (
                                                <Table>
                                                    <TableHeader><TableRow><TableHead>Severity</TableHead><TableHead>Type</TableHead><TableHead>Confidence</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>
                                                    <TableBody>
                                                        {aiExploitFindings.map(finding => (
                                                            <TableRow key={finding.id}>
                                                                <TableCell>{finding.severity}</TableCell>
                                                                <TableCell>{finding.vulnerabilityType}</TableCell>
                                                                <TableCell>{finding.aiConfidence}%</TableCell>
                                                                <TableCell>
                                                                    <Dialog>
                                                                        <DialogTrigger asChild>
                                                                            <Button variant="link" size="sm" onClick={() => setSelectedPoc(finding.proofOfConcept || null)}>View PoC</Button>
                                                                        </DialogTrigger>
                                                                        <DialogContent className="sm:max-w-md">
                                                                            <DialogHeader><DialogTitle>Exploit PoC: {finding.vulnerabilityType}</DialogTitle></DialogHeader>
                                                                            {selectedPoc ? (
                                                                                <pre className="mt-2 w-full rounded-md bg-muted p-4 overflow-auto max-h-[50vh] text-xs">
                                                                                    {typeof selectedPoc.content === 'string' ? selectedPoc.content : JSON.stringify(selectedPoc.content, null, 2)}
                                                                                </pre>
                                                                            ) : <p>No PoC available for this finding.</p>}
                                                                             <DialogFooter><DialogClose asChild><Button type="button" variant="secondary">Close</Button></DialogClose></DialogFooter>
                                                                        </DialogContent>
                                                                    </Dialog>
                                                                </TableCell>
                                                            </TableRow>
                                                        ))}
                                                    </TableBody>
                                                </Table>
                                            ) : <p className="text-muted-foreground">No specific exploit findings reported for this analysis.</p>}
                                        </div>
                                    ) : ( // Standard Simulation
                                        <pre className="mt-2 w-full rounded-md bg-muted p-4 overflow-auto max-h-[60vh] text-xs">
                                            {JSON.stringify(selectedRunDetails, null, 2)}
                                        </pre>
                                    )
                                ) : <p>No details loaded.</p>}
                                <DialogFooter><DialogClose asChild><Button type="button" variant="secondary">Close</Button></DialogClose></DialogFooter>
                            </DialogContent>
                        </Dialog>
                        {run.status === 'completed' && (
                          <Button 
                            variant="outline" 
                            size="sm" 
                            onClick={() => handleGenerateReport(run)}
                            disabled={isGeneratingReport}
                          >
                            {isGeneratingReport ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <FileText className="h-4 w-4" />
                            )}
                          </Button>
                        )}
                        {(run.status === 'running' || run.status === 'queued') && 
                            <Button variant="outline" size="sm" onClick={() => handleStopRun(run.id)}><StopCircle className="h-4 w-4"/></Button>}
                        <Button variant="destructive" size="sm" onClick={() => handleDeleteRun(run.id)}><Trash2 className="h-4 w-4"/></Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : <p className="text-sm text-muted-foreground text-center py-4">No simulation runs yet. Configure and start one above.</p>
          )}
        </CardContent>
        <CardFooter>
          <p className="text-xs text-muted-foreground">Simulation states and results are based on (simulated) backend processing and WebSocket updates.</p>
        </CardFooter>
      </Card>
    </div>
  );
}
