import React, { useState, useEffect, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Shield,
  Settings,
  Play,
  Pause,
  Stop,
  Upload,
  Download,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Clock,
  Zap,
  Code,
  FileText,
  Trash2,
  Plus,
  Eye,
  EyeOff,
  Info,
  Crown,
  Lock,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useAuth, UserTier } from "@/hooks/useAuth";
import { useFeatureFlags } from "@/hooks/useFeatureFlags";
import apiMiddleware from "@/lib/apiMiddleware";

interface ScanPlugin {
  id: string;
  name: string;
  description: string;
  version: string;
  author: string;
  category: "security" | "performance" | "compliance" | "custom";
  tier: UserTier;
  enabled: boolean;
  configurable: boolean;
  config?: Record<string, any>;
  isCustom: boolean;
  status: "active" | "inactive" | "error" | "updating";
  lastUpdated: string;
  scanCount: number;
  findings: number;
  avgExecutionTime: number;
  documentation?: string;
  website?: string;
}

interface ScanTarget {
  type: "address" | "bytecode" | "source" | "file";
  value: string;
  name?: string;
  metadata?: Record<string, any>;
}

interface ScanJob {
  id: string;
  target: ScanTarget;
  plugins: string[];
  status: "queued" | "running" | "completed" | "failed" | "cancelled";
  progress: number;
  startTime: string;
  endTime?: string;
  results: ScanResult[];
  errors?: string[];
}

interface ScanResult {
  id: string;
  pluginId: string;
  severity: "critical" | "high" | "medium" | "low" | "info";
  category: string;
  title: string;
  description: string;
  recommendation: string;
  confidence: number;
  location?: {
    file?: string;
    line?: number;
    column?: number;
    function?: string;
  };
  metadata?: Record<string, any>;
}

const DEFAULT_PLUGINS: ScanPlugin[] = [
  {
    id: "reentrancy-detector",
    name: "Reentrancy Detector",
    description:
      "Detects potential reentrancy vulnerabilities in smart contracts",
    version: "2.1.0",
    author: "Scorpius Security",
    category: "security",
    tier: "community",
    enabled: true,
    configurable: true,
    isCustom: false,
    status: "active",
    lastUpdated: "2024-01-15T10:00:00Z",
    scanCount: 15420,
    findings: 892,
    avgExecutionTime: 1.2,
    config: {
      depth: 3,
      checkExternalCalls: true,
      analyzeModifiers: true,
    },
  },
  {
    id: "access-control-analyzer",
    name: "Access Control Analyzer",
    description:
      "Analyzes access control patterns and potential privilege escalation",
    version: "1.8.3",
    author: "Scorpius Security",
    category: "security",
    tier: "starter",
    enabled: true,
    configurable: true,
    isCustom: false,
    status: "active",
    lastUpdated: "2024-01-12T14:30:00Z",
    scanCount: 12890,
    findings: 456,
    avgExecutionTime: 0.8,
  },
  {
    id: "mev-vulnerability-scanner",
    name: "MEV Vulnerability Scanner",
    description:
      "Advanced MEV attack vector detection with frontrunning analysis",
    version: "3.0.1",
    author: "Scorpius Security",
    category: "security",
    tier: "pro",
    enabled: false,
    configurable: true,
    isCustom: false,
    status: "active",
    lastUpdated: "2024-01-14T09:15:00Z",
    scanCount: 5670,
    findings: 234,
    avgExecutionTime: 2.5,
  },
  {
    id: "ai-powered-analyzer",
    name: "AI-Powered Code Analyzer",
    description:
      "Machine learning-based vulnerability detection with GPT-4 integration",
    version: "1.2.0",
    author: "Scorpius Security",
    category: "security",
    tier: "enterprise",
    enabled: false,
    configurable: true,
    isCustom: false,
    status: "active",
    lastUpdated: "2024-01-16T11:45:00Z",
    scanCount: 2340,
    findings: 567,
    avgExecutionTime: 15.2,
  },
];

export function VulnerabilityScanner() {
  const { user } = useAuth();
  const { isFeatureEnabled, canUseFeature } = useFeatureFlags();

  const [plugins, setPlugins] = useState<ScanPlugin[]>(DEFAULT_PLUGINS);
  const [selectedPlugins, setSelectedPlugins] = useState<string[]>([]);
  const [scanTarget, setScanTarget] = useState<ScanTarget>({
    type: "address",
    value: "",
  });
  const [currentScan, setCurrentScan] = useState<ScanJob | null>(null);
  const [scanHistory, setScanHistory] = useState<ScanJob[]>([]);
  const [isScanning, setIsScanning] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);

  // Plugin management states
  const [showPluginManager, setShowPluginManager] = useState(false);
  const [showCustomPluginDialog, setShowCustomPluginDialog] = useState(false);
  const [pluginFilter, setPluginFilter] = useState<string>("all");

  useEffect(() => {
    // Load user's plugin preferences
    loadPluginConfiguration();
    loadScanHistory();
  }, [user]);

  const loadPluginConfiguration = async () => {
    try {
      const response = await apiMiddleware.get("/api/scanner/plugins", {
        feature: "basic_scanning",
      });

      if (response.success && response.data) {
        setPlugins(response.data.plugins);
        setSelectedPlugins(
          response.data.plugins
            .filter((p: ScanPlugin) => p.enabled)
            .map((p: ScanPlugin) => p.id),
        );
      }
    } catch (error) {
      console.error("Failed to load plugin configuration:", error);
    }
  };

  const loadScanHistory = async () => {
    try {
      const response = await apiMiddleware.get("/api/scanner/scans", {
        feature: "basic_scanning",
      });

      if (response.success && response.data) {
        setScanHistory(response.data.scans || []);
      }
    } catch (error) {
      console.error("Failed to load scan history:", error);
    }
  };

  const togglePlugin = async (pluginId: string) => {
    const plugin = plugins.find((p) => p.id === pluginId);
    if (!plugin) return;

    // Check tier access
    if (!canAccessPlugin(plugin)) {
      return;
    }

    try {
      const enabled = !plugin.enabled;
      const endpoint = enabled
        ? `/api/scanner/plugins/${pluginId}/enable`
        : `/api/scanner/plugins/${pluginId}/disable`;

      const response = await apiMiddleware.post(
        endpoint,
        {},
        {
          feature: "basic_scanning",
        },
      );

      if (response.success) {
        setPlugins((prev) =>
          prev.map((p) => (p.id === pluginId ? { ...p, enabled } : p)),
        );

        if (enabled) {
          setSelectedPlugins((prev) => [...prev, pluginId]);
        } else {
          setSelectedPlugins((prev) => prev.filter((id) => id !== pluginId));
        }
      }
    } catch (error) {
      console.error("Failed to toggle plugin:", error);
    }
  };

  const canAccessPlugin = (plugin: ScanPlugin): boolean => {
    if (!user) return false;

    const tierHierarchy: UserTier[] = [
      "community",
      "starter",
      "pro",
      "enterprise",
    ];
    const userTierIndex = tierHierarchy.indexOf(user.tier);
    const pluginTierIndex = tierHierarchy.indexOf(plugin.tier);

    return userTierIndex >= pluginTierIndex;
  };

  const startScan = async () => {
    if (!scanTarget.value.trim() || selectedPlugins.length === 0) {
      return;
    }

    // Check scan limits
    if (!canUseFeature("basic_scanning")) {
      return;
    }

    try {
      setIsScanning(true);

      const response = await apiMiddleware.post(
        "/api/scanner/scan",
        {
          target: scanTarget,
          plugins: selectedPlugins,
          config: {
            priority: user?.tier === "enterprise" ? "high" : "normal",
            timeout: user?.tier === "community" ? 300 : 900, // 5 or 15 minutes
          },
        },
        {
          feature: "basic_scanning",
        },
      );

      if (response.success && response.data) {
        const newScan: ScanJob = {
          id: response.data.scanId,
          target: scanTarget,
          plugins: selectedPlugins,
          status: "queued",
          progress: 0,
          startTime: new Date().toISOString(),
          results: [],
        };

        setCurrentScan(newScan);
        setScanHistory((prev) => [newScan, ...prev]);

        // Start polling for updates
        pollScanStatus(newScan.id);
      }
    } catch (error) {
      console.error("Failed to start scan:", error);
      setIsScanning(false);
    }
  };

  const pollScanStatus = async (scanId: string) => {
    const poll = async () => {
      try {
        const response = await apiMiddleware.get(
          `/api/scanner/scans/${scanId}`,
          {
            feature: "basic_scanning",
          },
        );

        if (response.success && response.data) {
          const updatedScan = response.data;
          setCurrentScan(updatedScan);

          setScanHistory((prev) =>
            prev.map((scan) => (scan.id === scanId ? updatedScan : scan)),
          );

          if (
            updatedScan.status === "completed" ||
            updatedScan.status === "failed" ||
            updatedScan.status === "cancelled"
          ) {
            setIsScanning(false);
            return;
          }
        }
      } catch (error) {
        console.error("Failed to poll scan status:", error);
        setIsScanning(false);
        return;
      }

      // Continue polling
      setTimeout(poll, 2000);
    };

    poll();
  };

  const stopScan = async () => {
    if (!currentScan) return;

    try {
      await apiMiddleware.post(
        `/api/scanner/scans/${currentScan.id}/stop`,
        {},
        {
          feature: "basic_scanning",
        },
      );

      setIsScanning(false);
      setCurrentScan((prev) =>
        prev ? { ...prev, status: "cancelled" } : null,
      );
    } catch (error) {
      console.error("Failed to stop scan:", error);
    }
  };

  const uploadCustomPlugin = async (file: File) => {
    try {
      const response = await apiMiddleware.uploadFile(
        "/api/scanner/plugins/upload",
        file,
        { feature: "custom_integrations" },
      );

      if (response.success && response.data) {
        const newPlugin: ScanPlugin = {
          ...response.data.plugin,
          isCustom: true,
          status: "active",
        };

        setPlugins((prev) => [...prev, newPlugin]);
        setShowCustomPluginDialog(false);
      }
    } catch (error) {
      console.error("Failed to upload custom plugin:", error);
    }
  };

  const deleteCustomPlugin = async (pluginId: string) => {
    try {
      await apiMiddleware.delete(`/api/scanner/plugins/${pluginId}`, {
        feature: "custom_integrations",
      });

      setPlugins((prev) => prev.filter((p) => p.id !== pluginId));
      setSelectedPlugins((prev) => prev.filter((id) => id !== pluginId));
    } catch (error) {
      console.error("Failed to delete custom plugin:", error);
    }
  };

  const filteredPlugins = plugins.filter((plugin) => {
    if (pluginFilter === "all") return true;
    if (pluginFilter === "enabled") return plugin.enabled;
    if (pluginFilter === "disabled") return !plugin.enabled;
    if (pluginFilter === "custom") return plugin.isCustom;
    return plugin.category === pluginFilter;
  });

  const getTierIcon = (tier: UserTier) => {
    switch (tier) {
      case "community":
        return Shield;
      case "starter":
        return Zap;
      case "pro":
        return Crown;
      case "enterprise":
        return Crown;
      default:
        return Shield;
    }
  };

  const getTierColor = (tier: UserTier) => {
    switch (tier) {
      case "community":
        return "text-gray-500";
      case "starter":
        return "text-blue-500";
      case "pro":
        return "text-green-500";
      case "enterprise":
        return "text-yellow-500";
      default:
        return "text-gray-500";
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-400 via-cyan-400 to-blue-600 bg-clip-text text-transparent drop-shadow-[0_0_10px_rgba(59,130,246,0.5)]">
            Vulnerability Scanner
          </h2>
          <p className="text-gray-600 mt-2">
            Advanced smart contract security analysis with customizable plugins
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            onClick={() => setShowPluginManager(true)}
            className="border-gray-400 text-gray-700 hover:border-blue-400 hover:text-blue-600 hover:bg-blue-50 hover:shadow-lg hover:shadow-blue-400/20"
          >
            <Settings className="h-4 w-4 mr-2" />
            Manage Plugins
          </Button>
          {canUseFeature("custom_integrations") && (
            <Button
              variant="outline"
              onClick={() => setShowCustomPluginDialog(true)}
              className="border-gray-400 text-gray-700 hover:border-blue-400 hover:text-blue-600 hover:bg-blue-50 hover:shadow-lg hover:shadow-blue-400/20"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Plugin
            </Button>
          )}
        </div>
      </div>

      <Tabs defaultValue="scan" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="scan">New Scan</TabsTrigger>
          <TabsTrigger value="plugins">Plugins</TabsTrigger>
          <TabsTrigger value="history">History</TabsTrigger>
          <TabsTrigger value="results">Results</TabsTrigger>
        </TabsList>

        <TabsContent value="scan" className="space-y-6">
          {/* Scan Configuration */}
          <Card className="border-gray-300 bg-gray-50 shadow-lg shadow-gray-300/40">
            <CardHeader>
              <CardTitle className="text-black">Scan Configuration</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="target-type" className="text-black">
                    Target Type
                  </Label>
                  <Select
                    value={scanTarget.type}
                    onValueChange={(value: ScanTarget["type"]) =>
                      setScanTarget((prev) => ({ ...prev, type: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select target type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="address">Contract Address</SelectItem>
                      <SelectItem value="bytecode">Bytecode</SelectItem>
                      <SelectItem value="source">Source Code</SelectItem>
                      <SelectItem value="file">Upload File</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="target-value" className="text-black">
                    {scanTarget.type === "address"
                      ? "Contract Address"
                      : scanTarget.type === "bytecode"
                        ? "Bytecode (Hex)"
                        : "Source Code"}
                  </Label>
                  {scanTarget.type === "file" ? (
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
                      <input
                        type="file"
                        accept=".sol,.vy,.py,.js,.ts"
                        onChange={(e) => {
                          const files = Array.from(e.target.files || []);
                          setUploadedFiles(files);
                          setScanTarget((prev) => ({
                            ...prev,
                            value: files.map((f) => f.name).join(", "),
                          }));
                        }}
                        className="hidden"
                        id="file-upload"
                        multiple
                      />
                      <label
                        htmlFor="file-upload"
                        className="cursor-pointer flex flex-col items-center"
                      >
                        <Upload className="h-8 w-8 text-gray-400 mb-2" />
                        <span className="text-sm text-gray-600">
                          Upload contract files
                        </span>
                      </label>
                    </div>
                  ) : (
                    <Input
                      id="target-value"
                      value={scanTarget.value}
                      onChange={(e) =>
                        setScanTarget((prev) => ({
                          ...prev,
                          value: e.target.value,
                        }))
                      }
                      placeholder={
                        scanTarget.type === "address"
                          ? "0x..."
                          : scanTarget.type === "bytecode"
                            ? "0x608060405234801561001057600080fd5b50..."
                            : "pragma solidity ^0.8.0;..."
                      }
                      className="font-mono text-sm"
                    />
                  )}
                </div>
              </div>

              {/* Selected Plugins Summary */}
              <div className="space-y-2">
                <Label className="text-black">
                  Selected Plugins ({selectedPlugins.length})
                </Label>
                <div className="flex flex-wrap gap-2">
                  {plugins
                    .filter((p) => selectedPlugins.includes(p.id) && p.enabled)
                    .map((plugin) => {
                      const TierIcon = getTierIcon(plugin.tier);
                      return (
                        <Badge
                          key={plugin.id}
                          variant="outline"
                          className="border-blue-300 text-blue-600"
                        >
                          <TierIcon
                            className={`h-3 w-3 mr-1 ${getTierColor(plugin.tier)}`}
                          />
                          {plugin.name}
                        </Badge>
                      );
                    })}
                  {selectedPlugins.length === 0 && (
                    <p className="text-sm text-gray-500">
                      No plugins selected. Enable plugins in the Plugins tab.
                    </p>
                  )}
                </div>
              </div>

              {/* Scan Actions */}
              <div className="flex items-center gap-3 pt-4">
                <Button
                  onClick={startScan}
                  disabled={
                    isScanning ||
                    !scanTarget.value.trim() ||
                    selectedPlugins.length === 0
                  }
                  className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white hover:shadow-[0_0_20px_rgba(59,130,246,0.4)]"
                >
                  {isScanning ? (
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  ) : (
                    <Play className="h-4 w-4 mr-2" />
                  )}
                  {isScanning ? "Scanning..." : "Start Scan"}
                </Button>

                {isScanning && (
                  <Button
                    variant="outline"
                    onClick={stopScan}
                    className="border-red-400 text-red-600 hover:bg-red-50"
                  >
                    <Stop className="h-4 w-4 mr-2" />
                    Stop Scan
                  </Button>
                )}

                <div className="ml-auto text-sm text-gray-500">
                  {user?.limits.maxConcurrentScans && (
                    <span>
                      Concurrent scans: {isScanning ? 1 : 0} /{" "}
                      {user.limits.maxConcurrentScans}
                    </span>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Current Scan Progress */}
          {currentScan && (
            <Card className="border-gray-300 bg-gray-50 shadow-lg shadow-gray-300/40">
              <CardHeader>
                <CardTitle className="text-black flex items-center gap-2">
                  <Clock className="h-5 w-5" />
                  Current Scan Progress
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium text-black">
                      {currentScan.target.type}: {currentScan.target.value}
                    </p>
                    <p className="text-sm text-gray-600">
                      Status: {currentScan.status} • Plugins:{" "}
                      {currentScan.plugins.length}
                    </p>
                  </div>
                  <Badge
                    variant={
                      currentScan.status === "completed"
                        ? "default"
                        : currentScan.status === "failed"
                          ? "destructive"
                          : "secondary"
                    }
                  >
                    {currentScan.status}
                  </Badge>
                </div>

                <Progress value={currentScan.progress} className="w-full" />

                {currentScan.results.length > 0 && (
                  <div className="space-y-2">
                    <h4 className="font-medium text-black">
                      Findings ({currentScan.results.length})
                    </h4>
                    <div className="space-y-1">
                      {currentScan.results.slice(0, 3).map((result) => (
                        <div
                          key={result.id}
                          className="flex items-center gap-2 text-sm"
                        >
                          {result.severity === "critical" && (
                            <AlertTriangle className="h-4 w-4 text-red-500" />
                          )}
                          {result.severity === "high" && (
                            <AlertTriangle className="h-4 w-4 text-orange-500" />
                          )}
                          {(result.severity === "medium" ||
                            result.severity === "low") && (
                            <Info className="h-4 w-4 text-yellow-500" />
                          )}
                          {result.severity === "info" && (
                            <CheckCircle className="h-4 w-4 text-blue-500" />
                          )}
                          <span className="text-black">{result.title}</span>
                          <Badge variant="outline" className="text-xs">
                            {result.severity}
                          </Badge>
                        </div>
                      ))}
                      {currentScan.results.length > 3 && (
                        <p className="text-xs text-gray-500">
                          +{currentScan.results.length - 3} more findings...
                        </p>
                      )}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="plugins" className="space-y-6">
          {/* Plugin Management */}
          <Card className="border-gray-300 bg-gray-50 shadow-lg shadow-gray-300/40">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-black">Plugin Management</CardTitle>
                <div className="flex items-center gap-2">
                  <Select value={pluginFilter} onValueChange={setPluginFilter}>
                    <SelectTrigger className="w-40">
                      <SelectValue placeholder="Filter plugins" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Plugins</SelectItem>
                      <SelectItem value="enabled">Enabled</SelectItem>
                      <SelectItem value="disabled">Disabled</SelectItem>
                      <SelectItem value="security">Security</SelectItem>
                      <SelectItem value="performance">Performance</SelectItem>
                      <SelectItem value="custom">Custom</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {filteredPlugins.map((plugin) => {
                  const TierIcon = getTierIcon(plugin.tier);
                  const canAccess = canAccessPlugin(plugin);

                  return (
                    <motion.div
                      key={plugin.id}
                      layout
                      className={`p-4 rounded-lg border ${
                        plugin.enabled
                          ? "border-blue-300 bg-blue-50"
                          : "border-gray-300 bg-white"
                      } ${!canAccess ? "opacity-50" : ""}`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <h3 className="font-semibold text-black">
                              {plugin.name}
                            </h3>
                            <Badge
                              variant="outline"
                              className={`text-xs ${getTierColor(plugin.tier)}`}
                            >
                              <TierIcon className="h-3 w-3 mr-1" />
                              {plugin.tier}
                            </Badge>
                            {plugin.isCustom && (
                              <Badge variant="outline" className="text-xs">
                                Custom
                              </Badge>
                            )}
                            {!canAccess && (
                              <Lock className="h-4 w-4 text-gray-400" />
                            )}
                          </div>
                          <p className="text-sm text-gray-600 mb-2">
                            {plugin.description}
                          </p>
                          <div className="flex items-center gap-4 text-xs text-gray-500">
                            <span>v{plugin.version}</span>
                            <span>by {plugin.author}</span>
                            <span>{plugin.scanCount} scans</span>
                            <span>{plugin.findings} findings</span>
                            <span>{plugin.avgExecutionTime}s avg</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {plugin.configurable && canAccess && (
                            <Button
                              variant="outline"
                              size="sm"
                              className="text-xs"
                            >
                              <Settings className="h-3 w-3 mr-1" />
                              Configure
                            </Button>
                          )}
                          {plugin.isCustom && canAccess && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => deleteCustomPlugin(plugin.id)}
                              className="text-xs text-red-600 hover:bg-red-50"
                            >
                              <Trash2 className="h-3 w-3" />
                            </Button>
                          )}
                          <Switch
                            checked={plugin.enabled}
                            onCheckedChange={() => togglePlugin(plugin.id)}
                            disabled={!canAccess}
                          />
                        </div>
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="history" className="space-y-6">
          {/* Scan History */}
          <Card className="border-gray-300 bg-gray-50 shadow-lg shadow-gray-300/40">
            <CardHeader>
              <CardTitle className="text-black">Scan History</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {scanHistory.length === 0 ? (
                  <p className="text-center text-gray-500 py-8">
                    No scans yet. Start your first scan!
                  </p>
                ) : (
                  scanHistory.map((scan) => (
                    <div
                      key={scan.id}
                      className="p-4 rounded-lg border border-gray-300 bg-white"
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium text-black">
                            {scan.target.type}: {scan.target.value}
                          </p>
                          <p className="text-sm text-gray-600">
                            {new Date(scan.startTime).toLocaleString()} •{" "}
                            {scan.plugins.length} plugins •{" "}
                            {scan.results.length} findings
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge
                            variant={
                              scan.status === "completed"
                                ? "default"
                                : scan.status === "failed"
                                  ? "destructive"
                                  : "secondary"
                            }
                          >
                            {scan.status}
                          </Badge>
                          <Button variant="outline" size="sm">
                            <Eye className="h-3 w-3 mr-1" />
                            View
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="results" className="space-y-6">
          {/* Results View */}
          <Card className="border-gray-300 bg-gray-50 shadow-lg shadow-gray-300/40">
            <CardHeader>
              <CardTitle className="text-black">Scan Results</CardTitle>
            </CardHeader>
            <CardContent>
              {currentScan?.results && currentScan.results.length > 0 ? (
                <div className="space-y-4">
                  {currentScan.results.map((result) => (
                    <div
                      key={result.id}
                      className="p-4 rounded-lg border border-gray-300 bg-white"
                    >
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {result.severity === "critical" && (
                            <AlertTriangle className="h-5 w-5 text-red-500" />
                          )}
                          {result.severity === "high" && (
                            <AlertTriangle className="h-5 w-5 text-orange-500" />
                          )}
                          {(result.severity === "medium" ||
                            result.severity === "low") && (
                            <Info className="h-5 w-5 text-yellow-500" />
                          )}
                          {result.severity === "info" && (
                            <CheckCircle className="h-5 w-5 text-blue-500" />
                          )}
                          <h3 className="font-semibold text-black">
                            {result.title}
                          </h3>
                        </div>
                        <Badge variant="outline">{result.severity}</Badge>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">
                        {result.description}
                      </p>
                      <p className="text-sm text-blue-600">
                        {result.recommendation}
                      </p>
                      {result.location && (
                        <div className="mt-2 text-xs text-gray-500">
                          {result.location.function && (
                            <span>Function: {result.location.function} • </span>
                          )}
                          {result.location.line && (
                            <span>Line: {result.location.line}</span>
                          )}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-center text-gray-500 py-8">
                  No results to display. Run a scan to see findings.
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Custom Plugin Upload Dialog */}
      <Dialog
        open={showCustomPluginDialog}
        onOpenChange={setShowCustomPluginDialog}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upload Custom Plugin</DialogTitle>
            <DialogDescription>
              Upload your custom security analysis plugin. Supports Python,
              JavaScript, and WASM formats.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <input
                type="file"
                accept=".py,.js,.wasm,.zip"
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) {
                    uploadCustomPlugin(file);
                  }
                }}
                className="hidden"
                id="plugin-upload"
              />
              <label
                htmlFor="plugin-upload"
                className="cursor-pointer flex flex-col items-center"
              >
                <Upload className="h-8 w-8 text-gray-400 mb-2" />
                <span className="text-sm text-gray-600">
                  Drop plugin file here or click to browse
                </span>
                <span className="text-xs text-gray-500 mt-1">
                  Supports .py, .js, .wasm, .zip files
                </span>
              </label>
            </div>
            <Alert>
              <Info className="h-4 w-4" />
              <AlertDescription>
                Custom plugins require Pro tier or higher. Plugins will be
                sandboxed for security.
              </AlertDescription>
            </Alert>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
